#encoding='utf-8'
from __future__ import print_function

from keras import backend as K
import numpy as np
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers.core import Dense, Activation, Flatten
from keras.optimizers import SGD, RMSprop, Adam
from keras.utils import np_utils
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
import matplotlib.pyplot as plt

class LeNet :
    @staticmethod
    def build(input_shape, classes) :
        model= Sequential()
        # CONV => RELU => POOL
        model.add(Conv2D(20 , kernel_size=5 , padding="same" , input_shape=input_shape))
        model.add(Activation ("relu"))
        model.add(MaxPooling2D(pool_size=(2, 2) , strides=(2 , 2)))
        # CONV => RELU => POOL
        model.add(Conv2D(50 , kernel_size=5 , border_mode="same"))
        model.add(Activation("relu"))
        model.add(MaxPooling2D(pool_size=(2 , 2) , strides=(2 , 2)))
        # Flatten 层到RELU 层
        model.add(Flatten())
        model.add(Dense(500))
        model.add(Activation("relu"))
        # sof tmax 分类器
        model.add(Dense(classes))
        model.add(Activation("softmax"))
        return model


#网络和训练
NB_EPOCH = 20
BATCH_SIZE = 128
VERBOSE = 1
NB_CLASSES = 10
OPTIMIZER = Adam() 
N_HIDDEN = 128
VALIDATION_SPLIT=0.2
IMG_ROWS , IMG_COLS = 28 , 28



INPUT_SHAPE = (1 , IMG_ROWS , IMG_COLS )
#混合并划分训练集和测试集数据


(X_train , y_train) , (X_test , y_test ) = mnist.load_data()
K.set_image_dim_ordering ("th")
#把它们看成float 类型并归一化
X_train = X_train.astype ( 'float32')
X_test = X_test.astype ('float32')
X_train /= 255
X_test /= 255

#我们需要使用形状60K x [ 1 x 28 × 28 )作为卷积网络的输入
X_train = X_train[ : , np.newaxis , :, : ]
X_test = X_test[ : , np.newaxis , : , ]
print (X_train.shape[0], 'train samples ' )
print(X_test.shape[0], 'test samples ' )
#将类向量转换成二值类别矩阵
Y_train = np_utils.to_categorical(y_train , NB_CLASSES )
Y_test = np_utils.to_categorical(y_test, NB_CLASSES)
#初始化优化器和模型
model = LeNet.build(input_shape=INPUT_SHAPE , classes=NB_CLASSES)

model.compile (loss='categorical_crossentropy', optimizer=OPTIMIZER , metrics= [ 'accuracy'])
history= model.fit(X_train, Y_train ,
batch_size=BATCH_SIZE, epochs=NB_EPOCH,
verbose=VERBOSE, validation_split=VALIDATION_SPLIT )


score = model.evaluate(X_test, Y_test , verbose=VERBOSE)
print ('Test score :' , score[0] )
print ( 'Test accuracy :' , score[1])

#列出全部历史数据
print(history.history.keys())
#汇总准确率历史数据
plt.plot(history.history ['acc'])
plt.plot(history.history ['val_acc'])
plt.title ('model accuracy')
plt.ylabel ('accuracy')
plt.xlabel ('epoch')
plt.legend ( ['train','test ' ], loc='upper left')
plt.savefig('accuracy.png')
plt.show()
#汇总损失函数历史数据
plt.plot(history.history ['loss'])
plt.plot(history.history ['val_loss'])
pH.title ('model loss ' )
plt.ylabel ('loss')
plt.xlabel ('epoch')
plt.legend (['train','test'], loc='upper left')
plt.savefig('loss.png')
plt.show()
